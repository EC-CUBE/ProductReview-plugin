<?php
/*
 * This file is part of EC-CUBE
 *
 * Copyright(c) 2000-2015 LOCKON CO.,LTD. All Rights Reserved.
 *
 * http://www.lockon.co.jp/
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */

namespace Plugin\ProductReview\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * ProductReview
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ProductReviewRepository extends EntityRepository
{
    /**
     * find all
     *
     * @return type
     */
    public function findAll()
    {

        $query = $this->_em
            ->createQuery('SELECT m FROM Plugin\ProductReview\Entity\ProductReview m');
        $result = $query
            ->getResult(Query::HYDRATE_ARRAY);

        return $result;
    }

    /**
     * @param  \Plugin\ProductReview\Entity\ProductReview $ProductReview
     * @return bool
     */
    public function save(\Plugin\ProductReview\Entity\ProductReview $ProductReview)
    {
        $this->_em->getConnection()->beginTransaction();
        try {
            $this->_em->persist($ProductReview);
            $this->_em->flush();

            $this->_em->getConnection()->commit();
        } catch (\Exception $e) {
            $this->_em->getConnection()->rollback();

            return false;
        }
        return true;
    }

    /**
     * @param  \Plugin\ProductReview\Entity\ProductReview $ProductReview
     * @return bool
     */
    public function delete(\Plugin\ProductReview\Entity\ProductReview $ProductReview)
    {
        $this->_em->getConnection()->beginTransaction();
        try {
            $ProductReview->setDelFlg(1);
            $this->_em->persist($ProductReview);
            $this->_em->flush();

            $this->_em->getConnection()->commit();
        } catch (\Exception $e) {
            $this->_em->getConnection()->rollback();

            return false;
        }

        return true;
    }

    /**
     * 検索条件での検索を行う。
     *
     * @param unknown $searchData
     * @return \Doctrine\ORM\QueryBuilder
     */
    public function getQueryBuilderBySearchData($searchData)
    {
        $qb = $this->createQueryBuilder('r')
            ->select('r')
            ->leftJoin('r.Product', 'p')
            ->andWhere('r.del_flg = 0');
        
        if (!empty($searchData['multi']) && $searchData['multi']) {
            $qb
                ->andWhere('r.reviewer_name LIKE :reviewer_name OR r.reviewer_url LIKE :reviewer_url')
                ->setParameter('reviewer_name', '%' . $searchData['multi'] . '%')
                ->setParameter('reviewer_url', '%' . $searchData['multi'] . '%');
        }

        // 商品名
        if (isset($searchData['product_name']) && !is_null($searchData['product_name'])) {
            $qb
                ->andWhere('p.name LIKE :product_name')
                ->setParameter('product_name', '%' . $searchData['product_name'] . '%');
        }

        // 商品コード
        if (isset($searchData['product_code']) && !is_null($searchData['product_code'])) {
            $qb
                ->innerJoin('p.ProductClasses', 'pc')
                ->andWhere('pc.code LIKE :code')
                ->setParameter('code', '%' . $searchData['product_code'] . '%');
        }

        // 性別
        if (!empty($searchData['sex']) && count($searchData['sex']) > 0) {
            $sexs = array();
            foreach ($searchData['sex'] as $sex) {
                $sexs[] = $sex->getId();
            }

            $qb
                ->andWhere($qb->expr()->in('r.Sex', ':sexs'))
                ->setParameter('sexs', $sexs);
        }

        // おすすめレベル
        if (isset($searchData['recommend_level']) && !is_null($searchData['recommend_level'])) {
            $qb
                ->andWhere($qb->expr()->in('r.recommend_level', ':recommend_level'))
                ->setParameter('recommend_level', $searchData['recommend_level']);
        }

        // 投稿日
        if (isset($searchData['review_start']) && !is_null($searchData['review_start'])) {
            $date = $searchData['review_start']
                ->format('Y-m-d H:i:s');
            $qb
                ->andWhere('r.create_date >= :review_start')
                ->setParameter('review_start', $date);
        }
        if (isset($searchData['review_end']) && !is_null($searchData['review_end'])) {
            $date = $searchData['review_end']
                ->modify('+1 days')
                ->format('Y-m-d H:i:s');
            $qb
                ->andWhere('r.create_date < :review_end')
                ->setParameter('review_end', $date);
        }

        // Order By
        $qb->addOrderBy('r.update_date', 'DESC');

        return $qb;
    }
}
